{"version":3,"sources":["components/Navbar.js","components/Score.js","components/ImageCard.js","App.js","index.js"],"names":["Navbar","_ref","message","react_default","a","createElement","className","href","styles","mainSection","paddingBottom","boxShadow","Score","props","style","currentCount","imageSize","height","width","margin","ImageCard","images","handleOnClick","imageList","map","i","class","src","image","id","key","alt","name","onClick","App","state","clickedArray","highScore","shuffleArray","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleIfTrue","console","log","_this","setState","handleIfFalse","imageId","Object","toConsumableArray","concat","handleIfWinner","event","target","indexOf","components_Navbar","this","components_Score","components_ImageCard","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"oQAgBeA,SAbA,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OAEbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,+BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,aAAaD,UAAU,mBAA/B,qBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAf,IAAqCJ,EAArC,UCPAM,EAAS,CACbC,YAAa,CACXC,cAAe,OACfC,UAAW,kCAgBAC,EAbD,SAACC,GAAD,OACdV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAiCQ,MAAON,EAAOC,aAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,0CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,qBACmBO,EAAME,aADzB,sBCXNP,EAAS,CACbQ,UAAW,CACTC,OAAQ,QACRC,MAAO,QACPC,OAAQ,OACRR,UAAW,4BA+BAS,EA3BG,SAAAnB,GAA4B,IAA1BoB,EAA0BpB,EAA1BoB,OAAQC,EAAkBrB,EAAlBqB,cAEpBC,EAAYF,EAAOG,IAAI,SAACC,GAC5B,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,OAAKqB,OAAK,EACRC,IAAKF,EAAEG,MACPC,GAAIJ,EAAEI,GACNC,IAAKL,EAAEI,GACPf,MAAQN,EAAOQ,UACfe,IAAKN,EAAEO,KACPC,QAASX,SAOjB,OACEnB,EAAAC,EAAAC,cAAA,OAAKwB,GAAK,aACPN,WCgGQW,6MA9GbC,MAAQ,CACNd,OAAOA,EACPe,aAAa,GACbrB,aAAc,EACdsB,UAAW,EACXnC,QAAS,0BAWXoC,aAAe,SAACC,GAId,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,KAGTQ,aAAe,WACbC,QAAQC,IAAI,mBACZC,EAAKC,SAAS,CACdpC,aAAc,EACdqB,aAAa,GACblC,QAAS,oCACTmB,OAAO6B,EAAKZ,aAAaY,EAAKf,MAAMd,aAGtC+B,cAAgB,SAACC,GACfL,QAAQC,IAAI,+BACZC,EAAKC,SAAS,CACZpC,aAAemC,EAAKf,MAAMpB,aAAe,EACzCqB,aAAakB,OAAAC,EAAA,EAAAD,CAAKJ,EAAKf,MAAMC,cAAjBoB,OAAA,CAA+BH,IAC3CnD,QAAQ,wBACRmB,OAAO6B,EAAKZ,aAAaY,EAAKf,MAAMd,aAKxCoC,eAAiB,WACfP,EAAKC,SAAS,CACZpC,aAAc,EACdqB,aAAa,GACblC,QAAS,qCACTmB,OAAO6B,EAAKZ,aAAaY,EAAKf,MAAMd,aAOxCC,cAAgB,SAACoC,GACf,IAAIL,EAAUK,EAAMC,OAAO9B,GAC3BmB,QAAQC,IAAI,gCACZD,QAAQC,IAAI,aAAeI,IAGuB,IAA9CH,EAAKf,MAAMC,aAAawB,QAAQP,GAEK,KAAnCH,EAAKf,MAAMC,aAAaO,QAC1BK,QAAQC,IAAI,mCACZC,EAAKO,mBAIPT,QAAQC,IAAR,OAAAO,OAAmBH,EAAnB,gBACAH,EAAKE,cAAcC,KAKjBL,QAAQC,IAAII,EAAS,qBACrBH,EAAKH,sIAMT,OACE5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwD,EAAD,CACA3D,QAAS4D,KAAK3B,MAAMjC,UAEpBC,EAAAC,EAAAC,cAAC0D,EAAD,CACAhD,aAAc+C,KAAK3B,MAAMpB,aACzBsB,UAAWyB,KAAK3B,MAAME,YAEtBlC,EAAAC,EAAAC,cAAC2D,EAAD,CAAW3C,OAAQyC,KAAK3B,MAAMd,OAAQC,cAAewC,KAAKxC,wBAzGhD2C,aCZlBC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.c817a528.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Navbar = ({message}) => (\r\n  \r\n  <div className=\"navbar-fixed\">\r\n  <nav className = \"color light black lighten-3\">\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"index.html\" className=\"brand-logo left\">react  clickGame </a>\r\n      <div className=\"brand-logo center\"> {message} </div>\r\n    </div>\r\n  </nav>\r\n  </div>\r\n  \r\n)\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  mainSection: {\r\n    paddingBottom: '15px',\r\n    boxShadow: \"0px 0px 0px 0px rgba(0,0,0,0)\"\r\n  }\r\n}\r\nconst Score = (props) => (\r\n<div>\r\n    <div className=\"card-panel blue-grey lighten-5\" style={styles.mainSection}>\r\n        <div className=\"container\">\r\n            <h1 className=\"flow-text \">Click each image ONLY ONCE to win game</h1>\r\n            <p className=\"flow-text\">\r\n            Current Score:    {props.currentCount}          ||  </p> \r\n        </div>\r\n    </div>\r\n</div> \r\n\r\n)\r\n\r\nexport default Score;\r\n","import React from 'react';\r\n\r\nconst styles = {\r\n  imageSize: {\r\n    height: \"100px\",\r\n    width: \"100px\",\r\n    margin: \"20px\",\r\n    boxShadow: \"5px 5px 4px 5px #888888\",\r\n  }\r\n};\r\n\r\nconst ImageCard = ({images, handleOnClick}) =>{\r\n  \r\n  const imageList = images.map((i)=>{\r\n    return(\r\n      <div className=\"container\">\r\n      <div className =\"row\">\r\n        <div className=\"col s6 m6 l3\">\r\n        <img class\r\n          src={i.image}\r\n          id={i.id} \r\n          key={i.id} \r\n          style ={styles.imageSize}\r\n          alt={i.name} \r\n          onClick={handleOnClick}>\r\n        </img>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    )\r\n  })\r\n  return (\r\n    <div id = \"imageList\">\r\n      {imageList}\r\n    </div>\r\n  )\r\n}//end of const ImageCard\r\n\r\nexport default ImageCard;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar\";\r\nimport Score from \"./components/Score\";\r\nimport ImageCard from \"./components/ImageCard\"\r\nimport images from \"./images.json\";\r\n\r\n\r\n\r\nconst styles = {\r\n  correct:{\r\n    color: \"green\"\r\n  },\r\n  wrong:{\r\n    color: \"red\"\r\n  }\r\n}\r\nclass App extends Component {\r\n\r\n  state = {\r\n    images:images,\r\n    clickedArray:[],\r\n    currentCount: 0,\r\n    highScore: 0,\r\n    message: \"Click image to Start\"\r\n  }\r\n  //load immages in after mounting:\r\n  componentDidMount(){\r\n    // this.setState({\r\n    //   images:images\r\n    // })\r\n  }\r\n\r\n//Move image to clickedArray\r\n//increment score by one\r\n  shuffleArray = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\n  handleIfTrue = () => {\r\n    console.log(\"handleifTrue...\");\r\n    this.setState({\r\n    currentCount: 0,\r\n    clickedArray:[],\r\n    message: \"You lose! Click again to restart!\",\r\n    images:this.shuffleArray(this.state.images)\r\n    });\r\n  }\r\n  handleIfFalse = (imageId) => {\r\n    console.log(\"Going into handleifFalse...\");\r\n    this.setState({\r\n      currentCount: (this.state.currentCount + 1),\r\n      clickedArray: [...this.state.clickedArray, imageId],\r\n      message:\"Nice Job, Click again\",\r\n      images:this.shuffleArray(this.state.images)\r\n\r\n    });\r\n    \r\n  }\r\n  handleIfWinner = () => {\r\n    this.setState({\r\n      currentCount: 0,\r\n      clickedArray:[],\r\n      message: \"Winner! Click image to play again!\",\r\n      images:this.shuffleArray(this.state.images)\r\n    })\r\n  }\r\n\r\n//If clicked, check if image already exists in the clickedArray\r\n//If image does not exists in the clikedArray, go to handleIfFalse\r\n//if image exists go to handIfTrue\r\n  handleOnClick = (event) => {\r\n    let imageId = event.target.id\r\n    console.log(\"Going into handloeOnClick...\");\r\n    console.log('Image id: ' + imageId);\r\n\r\n    //if clicked image is not in the array\r\n    if (this.state.clickedArray.indexOf(imageId) === -1 ) {\r\n     //if clickedArray has 12 items:\r\n      if (this.state.clickedArray.length === 11){\r\n        console.log(\"Winner Winner Chicken Dinner...\")\r\n        this.handleIfWinner();\r\n      }\r\n      //if clickedArray does not have 12 items:\r\n      else{\r\n      console.log(`ID# ${imageId} clicked...`);\r\n      this.handleIfFalse(imageId);\r\n      }\r\n    }\r\n    //if clicked image is already in the array;\r\n    else {\r\n        console.log(imageId+ ' Already in Array');\r\n        this.handleIfTrue();\r\n      }\r\n  }//end of handleOnclick\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar \r\n        message={this.state.message}\r\n        ></Navbar>\r\n        <Score\r\n        currentCount={this.state.currentCount}\r\n        highScore={this.state.highScore}\r\n        ></Score>\r\n        <ImageCard images={this.state.images} handleOnClick={this.handleOnClick}></ImageCard>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}